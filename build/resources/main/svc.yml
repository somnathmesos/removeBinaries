name: {{FRAMEWORK_NAME}}
scheduler:
  principal: {{FRAMEWORK_PRINCIPAL}}
  zookeeper: {{FRAMEWORK_ZOOKEEPER}}
  user: {{FRAMEWORK_USER}}
pods:
  nifi:
    count: {{NODE_COUNT}}
    placement: '{{{NODE_PLACEMENT_CONSTRAINTS}}}'
    {{#ENABLE_VIRTUAL_NETWORK}}
    networks:
      {{VIRTUAL_NETWORK_NAME}}:
        labels: {{VIRTUAL_NETWORK_PLUGIN_LABELS}}
    {{/ENABLE_VIRTUAL_NETWORK}}
    rlimits:
      RLIMIT_NOFILE:
        soft: {{NODE_RLIMIT_NOFILE_SOFT}}
        hard: {{NODE_RLIMIT_NOFILE_HARD}}
      RLIMIT_NPROC:
        soft: {{NODE_RLIMIT_NPROC_SOFT}}
        hard: {{NODE_RLIMIT_NPROC_HARD}}
    resource-sets:
      node-resources:
        cpus: {{NODE_CPUS}}
        memory: {{NODE_MEM}}
        ports:
          web:
            port: {{NODE_PORT}}
            env-key: PORT_WEB
            advertise: true
            vip:
              prefix: {{NODE_VIP_PREFIX}}
              port: {{NODE_VIP_PORT}}
          node:
           port: {{NODE_PORT}}
           env-key: PORT_WEB
           advertise: true
        volumes:
          database-repository:
            path: {{NODE_DATABASE_REPOSITORY_DISK_PATH}}
            type: {{NODE_DATABASE_REPOSITORY_DISK_TYPE}}
            size: {{NODE_DATABASE_REPOSITORY_DISK_SIZE}}
          flowfile-repository:
            path: {{NODE_FLOWFILE_REPOSITORY_DISK_PATH}}
            type: {{NODE_FLOWFILE_REPOSITORY_DISK_TYPE}}
            size: {{NODE_FLOWFILE_REPOSITORY_DISK_SIZE}}
          provenance-repository:
            path: {{NODE_PROVENANCE_REPOSITORY_DISK_PATH}}
            type: {{NODE_PROVENANCE_REPOSITORY_DISK_TYPE}}
            size: {{NODE_PROVENANCE_REPOSITORY_DISK_SIZE}}
          content-repository:
            path: {{NODE_CONTENT_REPOSITORY_DISK_PATH}}
            type: {{NODE_CONTENT_REPOSITORY_DISK_TYPE}}
            size: {{NODE_CONTENT_REPOSITORY_DISK_SIZE}}
          misc-repository:
            path: misc-repository
            type: {{NODE_CONTENT_REPOSITORY_DISK_TYPE}}
            size: {{NODE_CONTENT_REPOSITORY_DISK_SIZE}}
      sidecar-resources:
        cpus: 0.5
        memory: 512
        volume:
          path: nifi-backup
          type: {{BACKUP_DISK_TYPE}}
          size: {{BACKUP_DISK_SIZE}}
      sidecar-cleanupresources:
        cpus: 0.5
        memory: 512
    uris:
      - {{JAVA_URI}}
      - {{BOOTSTRAP_URI}}
      - {{NIFI_URI}}
      - {{EXECUTOR_URI}}
      - {{NIFI_TOOLKIT_URI}}
      - {{NIFI_JANITOR_JAR_URI}}
      - {{NIFI_STATSD_JAR_URI}}
      - {{NIFI_PYHTON_URI}}
      - {{LIBMESOS_URI}}
    tasks:
      metrics:
        goal: RUNNING
        essential: false
        cmd: |
            ./bootstrap
            export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jdk*/jre*/) && export JAVA_HOME=${JAVA_HOME%/} && export PATH=$(ls -d $JAVA_HOME/bin):$PATH
            echo "Before running statsd"
            java -jar dcos-nifi-statsd.jar ../../misc-repository/url-info.properties $STATSD_UDP_HOST $STATSD_UDP_PORT 20
            echo "After running statsd"
        cpus: 0.2
        memory: 32
      node:
        resource-set: node-resources
        goal: RUNNING
        cmd: |
            ./bootstrap 
            export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jdk*/jre*/) && export JAVA_HOME=${JAVA_HOME%/} && export PATH=$(ls -d $JAVA_HOME/bin):$PATH
            echo "INSTALL" > misc-repository/readiness-info.txt 
            ./nifi-${NIFI_VERSION}/bin/nifi.sh run
        {{#TASKCFG_ALL_NIFI_CLUSTER_PROTOCOL_IS_SECURE}}
        transport-encryption:
          - name: node
            type: KEYSTORE
        {{/TASKCFG_ALL_NIFI_CLUSTER_PROTOCOL_IS_SECURE}}
        configs:
          nifi.properties:
            template: server.properties.mustache
            dest: nifi-{{NIFI_VERSION}}/conf/nifi.properties
        readiness-check:
            cmd: |
              # The Nifi node has started when it logs a specific 
              # "${TASK_NAME}.${FRAMEWORK_HOST}:$nifi_web_port is now connected" log line. 
              # An example is below:
              # 2018/03/05 11:11:37 nifi-0-node.nifi.autoip.dcos.thisdcos.directory:1025 is now connected.
              nifi_server_log_files=nifi-${NIFI_VERSION}/logs/nifi-app.log
              nifi_host_name=${TASK_NAME}.${FRAMEWORK_HOST}
              nifi_host_name_local=localhost
              nifi_web_port=${PORT_WEB}
              readiness_info=`cat misc-repository/readiness-info.txt`
              echo "Executing shell script."
              echo "$readiness_info"
              if [ "$readiness_info" == "INSTALL" ] ; then
                echo "Checking for successful log line in $nifi_server_log_files."
                echo "Looking for \"$nifi_host_name:$nifi_web_port is now connected or NiFi has started.\" in the server log file."
                grep -q "$nifi_host_name:$nifi_web_port is now connected\|NiFi has started." $nifi_server_log_files
                if [ $? -eq 0 ] ; then
                  echo "Found started log line."
                  echo "READY" > misc-repository/readiness-info.txt
                  echo "HOST=$nifi_host_name_local" > misc-repository/url-info.properties
                  echo "PORT=$nifi_web_port" >> misc-repository/url-info.properties
                else
                  echo "started log line not found. Exiting."
                  exit 1
                fi
                echo "Required log line found. Nifi is ready."
              elif [ $readiness_info == "READY" ] ; then
                echo "Nifi is ready."
              elif [ $readiness_info == "RUNNING" ] ; then
                echo "Nifi is running."
              fi
              exit 0
            interval: 5
            delay: 10
            timeout: 120
        env:
          NODE_CPUS: {{NODE_CPUS}}
          NODE_MEM: {{NODE_MEM}}
          NIFI_VERSION: {{NIFI_VERSION}}
      restart-cleanup:
        goal: ONCE
        cmd: |
         # Clean Nifi Application i.e. remove all disconnected node.
         misc_repo_path=../../misc-repository
         echo "Executing Janitor program to clean the Nifi disconnected node."
         export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jdk*/jre*/) && export JAVA_HOME=${JAVA_HOME%/} && export PATH=$(ls -d $JAVA_HOME/bin):$PATH
         java -jar dcos-nifi-janitor.jar $misc_repo_path/readiness-info.txt $misc_repo_path/url-info.properties
        resource-set: sidecar-cleanupresources
      backup:
        goal: ONCE
        cmd: >
                export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jdk*/jre*) ;
                sh $MESOS_SANDBOX/nifi-toolkit-${NIFI_VERSION}/bin/file-manager.sh -o backup -b nifi-backup -c $MESOS_SANDBOX/../../tasks/nifi-$POD_INSTANCE_INDEX-node*/nifi-{{NIFI_VERSION}} -v;
        resource-set: sidecar-resources
      upload-s3:
        goal: ONCE
        cmd: >
                export PATH=$MESOS_SANDBOX/python-dist/bin:$PATH ;
                aws s3 cp nifi-backup s3://${S3_BUCKET_NAME}/nifi-${POD_INSTANCE_INDEX}/ --recursive
        resource-set: sidecar-resources
      cleanup-backup:
        goal: ONCE
        cmd: >
                export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jdk*/jre/) ;
                rm -r nifi-backup/*
        resource-set: sidecar-resources
plans:
  deploy:
    strategy: serial
    phases:
      node:
        strategy: serial
        pod: nifi
        steps:
          - default: [[node],[metrics]]
  replace:
    strategy: serial
    phases:
      node:
        strategy: serial
        pod: nifi
        steps:
          - default: [[node],[metrics]]
      cleanup:
        strategy: serial
        pod: nifi
        steps:
          - default: [[restart-cleanup]]
  backup-s3:
    strategy: serial
    phases:
      backup:
        strategy: serial
        pod: nifi
        steps:
          - default: [[backup]]
      upload-backups:
        strategy: {{BACKUP_RESTORE_STRATEGY}}
        pod: nifi
        steps:
          - default: [[upload-s3]]
      cleanup-backups:
        strategy: {{BACKUP_RESTORE_STRATEGY}}
        pod: nifi
        steps:
          - default: [[cleanup-backup]]
